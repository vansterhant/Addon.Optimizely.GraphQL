using System.Collections.Generic;
using System.Linq;
using Microsoft.CodeAnalysis;

namespace Addon.Optimizely.GraphQL.Generator;

public static class CodeGenerators
{
    public static List<Field> GetFields(IEnumerable<INamedTypeSymbol> classSymbols)
    {
        var classesToConsider = classSymbols
            .TakeWhile(c => c.Name != "PageData" && c.Name != "BlockData" && c.Name != "MediaData").ToList();
        
        var fields = classesToConsider
            .SelectMany(x => x.GetMembers()
                .OfType<IPropertySymbol>()
                .Where(p => p.DeclaredAccessibility == Accessibility.Public
                            && p is { IsStatic: false, IsAbstract: false, IsIndexer: false })
                .Select(propertySymbol => new Field
                {
                    Symbol = propertySymbol, 
                    Type = GetDataType(propertySymbol.Type), 
                    FilterType = GetFilterDataType(propertySymbol.Type),
                    SortType = GetSortDataType(propertySymbol.Type)
                })).ToList()
            .Where(p => p.Type is not null);

        return fields.ToList();
    }
    
    public static string GetTypeClass(ClassMetadata classMetadata, bool shouldAddFilterTypes = true)
    {
        var filterFields = classMetadata.Fields.Where(f => f.FilterType is not null).ToList();
        var sortFields = classMetadata.Fields.Where(f => f.SortType is not null).ToList();
        var childrenField = classMetadata.BaseClass == "PageData" 
            ? $"""
               descriptor.Field("_children").Type<PageChildrenType>().Resolve(context => context.Parent<IContent>());
               // descriptor.Field("_parent").Type<PageDataType>().ResolveWith<Resolvers>(r => r.GetParent(default, default));
               """ : string.Empty;
        
        var result = $$"""
                       // <auto-generated/>

                       using System;
                       using System.Collections.Generic;
                       using System.Globalization;
                       using EPiServer;
                       using EPiServer.Core;
                       using EPiServer.DataAbstraction;
                       
                       using HotChocolate.Data;
                       using HotChocolate.Data.Filters;
                       using HotChocolate.Data.Sorting;
                       using HotChocolate.Types;

                       using Addon.Optimizely.GraphQL;
                       using Addon.Optimizely.GraphQL.Generated;

                       using {{classMetadata.NamespaceName}};

                       namespace {{classMetadata.NamespaceName}}.GraphQL;

                       public class {{classMetadata.ClassName}}Type : {{classMetadata.BaseClass}}TypeBase<{{classMetadata.ClassName}}>
                       {
                           protected override void Configure(IObjectTypeDescriptor<{{classMetadata.ClassName}}> descriptor)
                           {
                               base.Configure(descriptor);
                              
                               {{string.Join("\n        ", classMetadata.Fields.Select(f => f.Descriptor))}}
                               {{childrenField}}
                          }
                       }
                       
                       """;

        if (shouldAddFilterTypes)
        {
            result += $$"""
                        
                        public class {{classMetadata.ClassName}}FilterType : {{classMetadata.BaseClass}}FilterTypeBase<{{classMetadata.ClassName}}>
                        {
                            protected override void Configure(IFilterInputTypeDescriptor<{{classMetadata.ClassName}}> descriptor)
                            {
                                base.Configure(descriptor);
                                
                                {{string.Join("\n        ", filterFields.Select(f => $"descriptor.Field(f => f.{f.Symbol.Name});").Distinct())}}
                            }
                        }

                        public class {{classMetadata.ClassName}}SortType : {{classMetadata.BaseClass}}SortTypeBase<{{classMetadata.ClassName}}>
                        {
                            protected override void Configure(ISortInputTypeDescriptor<{{classMetadata.ClassName}}> descriptor)
                            {
                                base.Configure(descriptor);
                            
                                {{string.Join("\n        ", sortFields.Select(f => $"descriptor.Field(f => f.{f.Symbol.Name});").Distinct())}}
                            }
                        }

                        """;
        }

        return result;
    }

    public static string GetSharedBlockFacade(ClassMetadata classMetadata)
    {
        var result = GetTypeClass(new ClassMetadata
        {
            ClassName = $"Shared{classMetadata.ClassName}",
            BaseClass = $"Shared{classMetadata.BaseClass}",
            NamespaceName = classMetadata.NamespaceName,
            Fields = classMetadata.Fields
        });
        
        result += $$"""
                 
                 public class Shared{{classMetadata.ClassName}} : BlockFacadeBase<{{classMetadata.ClassName}}>
                 {
                     public Shared{{classMetadata.ClassName}}({{classMetadata.ClassName}} original) : base(original)
                     {
                     }
                 
                     {{string.Join("\n    ", classMetadata.Fields.Select(f => $"public {f.Symbol.Type.ToDisplayString()} {f.Symbol.Name} => Original.{f.Symbol.Name};"))}}
                 }
                 
                 """;

        return result;
    }
    
    public static string GetQueryMethod(ClassMetadata classMetadata)
    {
        var className = classMetadata.IsBlock ? $"Shared{classMetadata.ClassName}" : classMetadata.ClassName;
        var facade =  classMetadata.IsBlock ? $".Select(c => new {className}(c))" : string.Empty;
        
        return $$"""
              [UseOffsetPaging(IncludeTotalCount = true, MaxPageSize = 50)]
              [UseFiltering(typeof({{classMetadata.FilterName}}))]
              [UseSorting(typeof({{classMetadata.SortName}}))]
              public IEnumerable<{{className}}> Get{{classMetadata.ClassName}}(
                  [Service(ServiceKind.Synchronized)] ContentQueryService contentQueryService,
                  int[] ids = null,
                  [GraphQLType<LanguageType>]string language = null)
              {
                  return contentQueryService.GetContentOfType<{{classMetadata.ClassName}}>(ids, language){{facade}};
              }
              
          """;
    }

    public static string GetQuery(List<ClassMetadata> types)
    {
        return $$"""
              // <auto-generated/>
              
              using System.Collections.Generic;
              using System.Linq;
              using EPiServer;
              using EPiServer.Core;
              using EPiServer.DataAbstraction;
              using EPiServer.Filters;
              using HotChocolate;
              using HotChocolate.Data;
              using HotChocolate.Data.Filters;
              using HotChocolate.Data.Sorting;
              using HotChocolate.Resolvers;
              using HotChocolate.Types;

              using Addon.Optimizely.GraphQL;
              {{string.Join("\n", types.Select(t =>  $"using {t.NamespaceName};").Distinct())}}
              {{string.Join("\n", types.Select(t =>  $"using {t.NamespaceName}.GraphQL;").Distinct())}}

              namespace Addon.Optimizely.GraphQL.Generated;

              public class Query : QueryBase
              {
              {{string.Join("\n", types.Select(GetQueryMethod))}}
              }
              
              """;
    }

    public static string GetSchemaBuilderExtension(List<ClassMetadata> types)
    {
        var sharedBlockTypes = types.Where(t => t.BaseClass == "BlockData")
            .Select(t => $"builder.AddType<Shared{t.ClassName}Type>();");
        
        return $$$"""
                  // <auto-generated/>
                  
                  using System;
                  using HotChocolate.Execution.Configuration;
                  using Microsoft.Extensions.DependencyInjection;
                  {{{string.Join("\n", types.Select(t => $"using {t.NamespaceName}.GraphQL;").Distinct())}}}

                  namespace Addon.Optimizely.GraphQL.Generated;

                  public static class SchemaRequestExecutorBuilderExtensions
                  {
                      public static IRequestExecutorBuilder AddCmsGraphQl(this IServiceCollection services)
                      {
                          if (services is null)
                          {
                              throw new ArgumentNullException(nameof(services));
                          }
                          
                          services.AddSingleton<IContentAreaItemFactory, ContentAreaItemFactory>();
                  
                          var builder = services.AddCmsGraphQlCore();
                          {{{string.Join("\n        ", types.Select(t => $"builder.AddType<{t.ClassName}Type>();"))}}}
                          {{{string.Join("\n        ", sharedBlockTypes)}}}
                  
                          builder.AddQueryType<Query>();
                          
                          return builder;
                      }
                  }
                  """;
    }

    public static string GetContentAreaItemsFactory(List<ClassMetadata> types)
    {
        var switchStatements = types.Where(t => t.BaseClass == "BlockData")
            .Select(b => $"{b.ClassName} b => new Shared{b.ClassName}(b),");

        return $$"""
              using System;
              using Addon.Optimizely.GraphQL;
              using EPiServer.Core;

              {{string.Join("\n", types.Select(t => $"using {t.NamespaceName};").Distinct())}}
              {{string.Join("\n", types.Select(t => $"using {t.NamespaceName}.GraphQL;").Distinct())}}
              
              namespace Addon.Optimizely.GraphQL.Generated;
              
              public class ContentAreaItemFactory : IContentAreaItemFactory
              {
                  public object CreateFacade(IContentData content)
                  {
                      return content switch
                      {
                          {{string.Join("\n            ", switchStatements)}}
                          _ => content
                      };
                  }
              }
              """;
    }

    public static string GetPageChildrenType(List<ClassMetadata> types)
    {
        var fields = types.Where(t => t.BaseClass == "PageData").Select(t =>
            $$"""
                      descriptor
                          .Field("{{t.ClassName}}") 
                          .Type<ListType<{{t.ClassName}}Type>>()
                          .UseFiltering<{{t.FilterName}}>()
                          .UseSorting<{{t.SortName}}>()
                          .ResolveWith<Resolvers>(r => r.GetChildren<{{t.ClassName}}>(default, default));
              """);
        
        return $$"""
          // <auto-generated/>
          
          using System.Linq;
          using EPiServer;
          using EPiServer.Core;
          using HotChocolate.Types;
          using Addon.Optimizely.GraphQL;

          {{string.Join("\n", types.Select(t => $"using {t.NamespaceName};").Distinct())}}
          {{string.Join("\n", types.Select(t => $"using {t.NamespaceName}.GraphQL;").Distinct())}}
          
          namespace Addon.Optimizely.GraphQL;
          
          public class PageChildrenType : ObjectType
          {
              protected override void Configure(IObjectTypeDescriptor descriptor)
              {
                  descriptor.Name("PageChildren");
          {{string.Join("\n", fields)}}
              }
          }
          """;
    }
    
    private static string? GetDataType(ITypeSymbol typeSymbol)
    {
        var namedTypeSymbol = (INamedTypeSymbol)typeSymbol;

        switch (namedTypeSymbol.Name)
        {
            case "String":
                return "StringType";
            case "Boolean":
                return "BooleanType";
            case "Int":
                return "IntType";
            case "DateTime":
                return "DateType";
            case "Double":
                return "FloatType";
            case "XhtmlString":
                return "XhtmlStringType";
            case "PageReference":
            case "ContentReference":
                return "StringType";
            case "Url":
                return "UrlType";
            case "LinkItemCollection":
                return "ListType<LinkItemType>";
            case "ContentReferenceList":
                return "ListType<IntType>";
            case "ContentArea":
                return "ContentAreaType";
            case "IList":
                return $"ListType<{namedTypeSymbol.TypeArguments.First().Name}Type>";
        }

        return null;
    }
    
    private static string? GetFilterDataType(ITypeSymbol typeSymbol)
    {
        var namedTypeSymbol = (INamedTypeSymbol)typeSymbol;

        switch (namedTypeSymbol.Name)
        {
            case "String":
                return "StringOperationFilterInput";
            case "Boolean":
                return "BooleanOperationFilterInput";
            case "Int":
                return "IntOperationFilterInput";
            case "DateTime":
                return "DateTimeOperationFilterInput";
            case "Double":
                return "FloatOperationFilterInput";
            case "XhtmlString":
                return null;
            case "PageReference":
            case "ContentReference":
                return "ContentReferenceInputType";
            case "Url":
                return "Url2InputType";
            case "LinkItemCollection":
                return null;
            case "ContentReferenceList":
                return null;
            case "ContentArea":
                return null;
            case "IList":
                return $"ListType<{namedTypeSymbol.TypeArguments.First().Name}Type>";
        }

        return null;
    }
    
    private static string? GetSortDataType(ITypeSymbol typeSymbol)
    {
        var namedTypeSymbol = (INamedTypeSymbol)typeSymbol;

        switch (namedTypeSymbol.Name)
        {
            case "String":
                return "StringOperationSortInput";
            case "Boolean":
                return "BooleanOperationSortInput";
            case "Int":
                return "IntOperationSortInput";
            case "DateTime":
                return "DateTimeOperationSortInput";
            case "Double":
                return "FloatOperationSortInput";
            case "XhtmlString":
            case "PageReference":
            case "ContentReference":
            case "Url":
            case "LinkItemCollection":
            case "ContentReferenceList":
            case "ContentArea":
            case "IList":
                return null;
        }

        return null;
    }
}